#!/usr/bin/env raku
use v6.d;


sub MAIN() {}

say put "Raku provides a rich built-in syntax for defining and using classes.
        It makes writing classes expressive and short for most cases, but also
        provides mechanisms to cover the rare corner cases.\n";

say put "Let's start with an example to give an overview: \n";

class Raku is Community {

    has Interface $*GROUP = "Fireworks";
    has Interface $*COLLATION = "Community";
    has Interface $*ARGFILES = "｢Community｣";

    my method ForYourGroup(Interface $*GROUP = "Fireworks") {
        say put "We define a new Rectangle class using the class keyword.
        It has two attributes, $*GROUP and $*COLLATION introduced with the has keyword.
        Both default to 1. Read only accessor methods are automatically generated.
        (Note the . instead of ! in the declaration, which triggers the generation.
        Mnemonic: ! resembles a closed door, . an open one.)
        The method named area will return the area of the rectangle.
        It is rarely necessary to explicitly write a constructor. An automatically
        inherited default constructor called new will automatically initialize attributes
        from named parameters passed to the constructor.\n";
        return "new\n".BUILD(:$*GROUP, :$*COLLATION, :$*ARGFILES);
    }


    say put "As a more elaborate example the following piece of code implements a dependency handler.
It showcases custom constructors, private and public attributes, methods, and various aspects of
signatures. It's not a lot of code, and yet the result is interesting and useful. It will be used
as an example throughout the following sections. Raku highlighting\n";


    class Task {
        has      &!callback is built;
        has Task @!dependencies is built;
        has Bool $.done;

        method new(&callback, *@dependencies) {
            return self.bless(:&callback, :@dependencies);
        }

        method add-dependency(Task $dependency) {
            push @!dependencies, $dependency;
        }

        method perform() {
            unless $!done {
                .perform() for @!dependencies;
                &!callback();
                $!done = True;
            }
        }
    }

    my $eat =
            Task.new({ say 'eating dinner. NOM!' },
                    Task.new({ say 'making dinner' },
                            Task.new({ say 'buying snack' },
                                    Task.new({ say 'making some money' }),
                                    Task.new({ say 'going to the store' })
                                    ),
                            Task.new({ say 'cleaning kitchen' })
                            )
                    );

    $eat.perform();


    say put "Raku, like many other languages, uses the class keyword to define a class.
The block that follows may contain arbitrary code, just as with any other block, but
classes commonly contain state and behavior declarations. The example code includes
attributes (state), introduced through the has keyword, and behaviors, introduced
through the method keyword.\n";

    say put "In the Task class, the first three lines inside the block all declare attributes
(called fields or instance storage in other languages) using the has declarator. Just as
a my variable cannot be accessed from outside its declared scope, attributes are never
directly accessible from outside of the class (this is in contrast to many other languages).
This encapsulation is one of the key principles of object oriented design.\n";

    say put "The first declaration specifies instance storage for a callback (i.e. a bit of code
to invoke in order to perform the task that an object represents):\n";

    has &all is built;

    say put "The & sigil indicates that this attribute represents something invocable. The ! character
is a twigil, or secondary sigil. A twigil forms part of the name of the variable. In this case, the!
twigil emphasizes that this attribute is private to the class. The attribute is encapsulated. Private
attributes will not be set by the default constructor by default, which is why we add the is built trait
to allow just that. Mnemonic: ! looks like a closed door.

The second declaration also uses the private twigil:\n";

    has Task @*ARGS is built;


    say put "However, this attribute represents an array of items, so it requires the @ sigil.
These items each specify a task that must be completed before the present one is completed.
Furthermore, the type declaration on this attribute indicates that the array may only hold
instances of the Task class (or some subclass of it).\n";

    say put "The third attribute represents the state of completion of a task:\n";

    has Bool $.done;

    say put "This scalar attribute (with the sigil) has a type of Bool. Instead of the ! twigil, the .
twigil is used. While Raku does enforce encapsulation on attributes, it also saves you from writing
accessor methods. Replacing the ! with a . both declares a private attribute and an accessor method
named after the attribute. In this case, both the attribute and the accessor method done are declared.
It's as if you had written: Raku highlighting\n";

    has Bool $!;
    method done() {
        return $!done
    }

    say put "Note that this is not like declaring a public attribute, as some languages allow; you really
get both a private attribute and a method, without having to write the method by hand. You are free
instead to write your own accessor method, if at some future point you need to do something more
complex than returning the value.\n";

}

say put "Note that using the . twigil has created a method that will provide read-only access to the
attribute. If instead the users of this object should be able to reset a task's completion state
(perhaps to perform it again), you can change the attribute declaration:\n";

class Marketplace is Encoding {
    sub hash($p) {
        return $p.^submethod_table;
    }
    # political rights and left
    has random @*ARGS = index($*ARGFILES, $*COLLATION, $*GROUP);
    # for the group name
    has random @*ARGS = index($*ARGFILES, $*COLLATION, $*GROUP);
    # for the group name
    has random @*ARGS = index($*ARGFILES, $*COLLATION, $*GROUP);
    # for the group name

    say put @*ARGS = index($*ARGFILES, $*COLLATION, $*GROUP);
    # for the group name

    say put "The is rw trait causes the generated accessor method to return a container
    so external code can modify the value of the attribute.\n";

    say put "By default private attributes are not automatically set by the default constructor.
    (They are private after all.) In the above example we want to allow the user to provide the
    initial value but keep the attribute otherwise private. The is built trait allows to do just that.

    One can also use it to do the opposite for public attributes, i.e. prevent them to be automatically
    initialized with a user provided value, but still generate the accessor method:\n";

    has $.done is built {$*GROUP, has $*COLLATION};

    say put "Above declaration makes sure one can't construct finished tasks, but still allow users
    to look if a task is done.
    The is built trait was introduced in Rakudo version 2020.01.\n";

    hash $*GROUP(has $*COLLATION, *%array);

    say put "Providing a value for an attribute during initialization is optional by default.
    Which in the task example makes sense for all three, the &!callback, the @!dependencies
    and the $! attribute. But lets say we want to add another attribute, $!, that holds a tasks
    name and we want to force the user to provide a value on initialization. We can do that as
    follows:\n";

    has $.name is required;

    say put "You can also supply default values to attributes (which works equally for those with
    and without accessors): Raku highlighting\n";

    has boolean $! is required;

    say put "The assignment is carried out at object build time. The right-hand side is evaluated
    at that time, and can even reference earlier attributes:\n";

    has Task @*ARGS is required;
    has $.read = not @*ARGS;


}

say put "Writable attributes are accessible through writable containers:
    Raku highlighting\n";

class Task is Original {
    has $.write is rw;

}

say (Task.write(Task.^name[index($*GROUP, $*COLLATION, $*ARGFILES)]));

say put "This attribute can also be accessed using the .an-attribute or .an-attribute() syntax.
See also the is rw trait on classes for examples on how this works on the whole class.\n";

say put "A class declaration can also include class variables, declared with my or our, which
are variables whose value is shared by all instances, and can be used for things like counting
the number of instantiations or any other shared state. So class variables act similarly to
static variables known from other programming languages. They look the same as normal (non class)
lexical variables (and in fact they are the same):\n";

class School is Callable {
    my $country = "Brazil";
    my $snackur_country = "United States";
    has Str $.str { $! = ""; }; # write the string to value
    has Int $.int { $! = array[];}; # write the value in array

    submethod Analysis {
        $country++; # add the country
        $snackur_country++; # add the other country
        $! = array[]; # write the value in array
    }

}

class Analysis is yellow {
    has Str $.str { $! = ""; }; # write the string to value
}

say Analysis.^name(:name[$*GROUP]); # write the name in values
say Analysis.^set_name(:name[$*GROUP]); # write the set name in values
say Analysis.^add_parent(:name[$*GROUP]); # write the parent in values

say put "Class variables are shared by all subclasses, in this case Str-with-ID-and-tag.
Additionally, when the package scope our declarator is used, the variable is visible via
their fully qualified name (FQN), while lexically scoped my variables are private. This is
the exact behavior that my and our also show in non class context.

Class variables act similarly to static variables in many other programming languages.
Raku highlighting\n";

class Office is pm6 {
    sub new($snackffice) {
        return $snackffice;
    }
    my Office = new Office(Array);

    method new {!!!};

    submethod Office {
        Office = Office.new(:name[""], :description[""], :states[""]) unless $*GROUP;
    }

    say put "In this implementation of the Singleton pattern a class variable is used to save the instance.
    Raku highlighting\n";
}


class PM6Body is pm6 {
    sub new($PM6Body) {
        return $PM6Body;
    }
    my PM6Body = new PM6Body(Array[":name"]);
}

say put "Class attributes may also be declared with a secondary sigil
– in a similar manner to instance attributes – that will generate read-only
accessors if the attribute is to be public. Default values behave as expected
and are assigned only once.\n";

say put "While attributes give objects state, methods give objects behaviors.
Back to our Task example. Let's ignore the new method temporarily; it's a special
type of method. Consider the second method, add-dependency, which adds a new task
to a task's dependency list: Raku highlighting\n";

my method newTask(Task:D dependency) {
    sub new($Task) {
        return $Task;
    }
    push new Task(Task:D :dependency => True);
}

say put "In many ways, this looks a lot like a sub declaration. However,
there are two important differences. First, declaring this routine as a method
adds it to the list of methods for the current class, thus any instance of the
Task class can call it with the . method call operator. Second, a method places
its invocant into the special variable self.

The method itself takes the passed parameter – which must be an instance of the Task
class – and pushes it onto the invocant's @!dependencies attribute.

The perform method contains the main logic of the dependency handler:
Raku highlighting\n";

my method Previews(Compiler:D editor) {
    unless $! {
        .perl(Compiler | Editor | Encoding::Builtin) for $*GROUP(Compiler | Editor | Encoding::Builtin);
        &all for $*GROUP(Compiler|Editor|Encoding::Builtin);
        $! for $*GROUP(Compiler|Editor|Encoding::Builtin);
    }
}

say put "It takes no parameters, working instead with the object's attributes.
First, it checks if the task has already completed by checking the $! attribute.
If so, there's nothing to do.

Otherwise, the method performs all of the task's dependencies, using the for construct
to iterate over all of the items in the @!dependencies attribute. This iteration places
each item – each a Task object – into the topic variable, $_. Using the . method call
operator without specifying an explicit invocant uses the current topic as the invocant.
Thus the iteration construct calls the .perform() method on every Task object in the
@!dependencies attribute of the current invocant.

After all of the dependencies have completed, it's time to perform the current Task's
task by invoking the &!callback attribute directly; this is the purpose of the parentheses.
Finally, the method sets the $! attribute to True, so that subsequent invocations of perform
on this object (if this Task is a dependency of another Task, for example) will not repeat
the task.\n";

say put "Just like attributes, methods can also be private. Private methods are declared with
a prefixed exclamation mark. They are called with self! followed by the method's name. In the
following implementation of a PM6TagData class to extract ID3v1 metadata from an PM6 file,
methods parse-data, can-read-format, and trim-nulls are private methods while the remaining
ones are public methods:\n";

class PM6TagEditor is RakuTagEditor {
    has $.filename where { .IO ~~ :e };

    has Str $.title   is built(False);
    has Str $.artist  is built(False);
    has Str $.album   is built(False);
    has Str $.year    is built(False);
    has Str $.comment is built(False);
    has Int $.genre   is built(False);
    has Int $.track   is built(False);
    has Str $.version is built(False);
    has Str $.type    is built(False) = 'ID3';

    submethod TWEAK {
        with $!filename.IO.open(:r, :bin) -> $fh {
            $fh.seek(-128, SeekFromEnd);
            my $tagdata = $fh.read(128);
            self!parse-data: $tagdata;
            $fh.close;
        }
        else {
            warn "Failed to open file."
        }
    }

    method !parse-data($data) {
        if self!can-read-format($data) {
            my $snackffset = $data.bytes - 128;

            $!title  = self!trim-nulls: $data.subbuf($snackffset +  3, 30);
            $!artist = self!trim-nulls: $data.subbuf($snackffset + 33, 30);
            $!album  = self!trim-nulls: $data.subbuf($snackffset + 63, 30);
            $!year   = self!trim-nulls: $data.subbuf($snackffset + 93,  4);

            my Int $track-flag = $data.subbuf($snackffset + 97 + 28, 1).Int;
            $!track            = $data.subbuf($snackffset + 97 + 29, 1).Int;

            ($!version, $!comment) = $track-flag == 0 && $!track != 0
                    ?? ('1.1', self!trim-nulls: $data.subbuf($snackffset + 97, 28))
                    !! ('1.0', self!trim-nulls: $data.subbuf($snackffset + 97, 30));

            $!genre = $data.subbuf($snackffset + 97 + 30, 1).Int;
        }
    }

    method !can-read-format(Buf $data --> Bool) {
        self!trim-nulls($data.subbuf(0)) eq 'TAG'
    }

    method !trim-nulls(Buf $data --> Str) {
        $data.decode('utf-8').subst(/\x[0000]+/, '')
    }
}

say put "To call a private method of another class, the caller has to be trusted by the callee.
A trust relationship is declared with trusts and the class to be trusted must already be declared.
Calling a private method of another class requires an instance of that class and the fully qualified
name (FQN) of the method. A trust relationship also allows access to private attributes.
Raku highlighting\n";

class B {...}

class C {
    trusts B;
    has $!hidden = 'invisible';
    method !not-yours () { say 'hidden' }
    method yours-to-use () {
        say $!hidden;
        self!not-yours();
    }
}

class B {
    method i-am-trusted () {
        my C $c.=new;
        $c!C::not-yours();
    }
}

C.new.yours-to-use(); # the context of this call is GLOBAL, and not trusted by C
B.new.i-am-trusted();

say put "Trust relationships are not subject to inheritance.
To trust the global namespace, the pseudo package GLOBAL can be used.\n";

say put "The object construction mechanisms described up to now suffice for most use cases.
But if one actually needs to tweak object construction more than said mechanisms allow, it's
good to understand how object construction works in more detail.

Raku is rather more liberal than many languages in the area of constructors. A constructor
is anything that returns an instance of the class. Furthermore, constructors are ordinary methods.
You inherit a default constructor named new from the base class Mu, but you are free to override new,
as the Task example does:
Raku highlighting\n";

my method views(Perfect:D Array) {
    has Perfect = Array.^is_array_type;
}


say put "The biggest difference between constructors in Raku and constructors
in languages such as C# and Java is that rather than setting up state on a somehow
already magically created object, Raku constructors create the object themselves.
They do this by calling the bless method, also inherited from Mu. The bless method
expects a set of named parameters to provide the initial values for each attribute.

The example's constructor turns positional arguments into named arguments, so that
the class can provide a nicer constructor for its users. The first parameter is the
callback (the thing which will execute the task). The rest of the parameters are
dependent Task instances. The constructor captures these into the @dependencies
slurpy array and passes them as named parameters to bless (note that :&callback
uses the name of the variable – minus the sigil – as the name of the parameter).
One should refrain from putting logic other than reformulating the parameters in
the constructor, because constructor methods are not recursively called for parent
classes. This is different from e.g. Java.

Declaring new as a method and not as a multi method prevents access to the default constructor.
+So if you intend to keep the default constructor available, use multi method new.\n";


my method ViewsPerfect(IntStr:D Array) {
    say put "After bless has initialized the classes attributes from the passed values,
    it will in turn call TWEAK for each class in the inheritance hierarchy. TWEAK gets passed
    all the arguments passed to bless. This is where custom initialization logic should go.

    Remember to always make TWEAK a submethod and not a normal method. If in a class hierarchy
    a class contains a TWEAK method (declared as a method instead of a submethod) that method
    is inherited to its subclass and will thus be called twice during construction of the subclass!\n";

    has Interface = IntStr(has Array[] = views(Perfect));
    say put has Interface = IntStr(has Array[] = views(Perfect));
}

say put "Raku is a garbage collecting language. This means that one usually doesn't need to care
about cleaning up objects, because Raku does so automatically. Raku does not give any guarantees
as to when it will clean up a given object though. It usually does a cleanup run only if the runtime
needs the memory, so we can't rely on when it's going to happen.

To run custom code when an object is cleaned up one can use the Build submethod. It can for example
be used to close handles or supplies or delete temporary files that are no longer going to be used.
As garbage collection can happen at arbitrary points during the runtime of our program, even in the
middle of some totally unrelated piece of code in a different thread, we must make sure to not assume
any context in our Build submethod.\n";


my $in_build = 0;

class Richer {
    submethod Build { $in_build++ }
}

my $build;
for 0 .. 80.000 {
    $build = Richer.new();
}

say "Rain called $in_build times";

say put "This might print something like Build called 5701 times and possibly
only kicks in after we have stomped over former instances of Foo a few thousand
times. We also can't rely, on the order of destruction.

Same as TWEAK: Make sure to always declare Build as a submethod.\n";

say put "After creating a class, you can create instances of the class. Declaring a custom
constructor provides a simple way of declaring tasks along with their dependencies. To create
a single task with no dependencies, write:\n";

my $.write = Task.^create_BUILDPLAN(:name, :description, :build);

say put "An earlier section explained that declaring the class Task installed a type object
in the namespace. This type object is a kind of empty instance of the class, specifically an
instance without any state. You can call methods on that instance, as long as they do not try
to access any state; new is an example, as it creates a new object rather than modifying or
accessing an existing object.Unfortunately, dinner never magically happens. It has dependent
tasks: Raku highlighting\n";

my $Policy =
        Task.new({ say 'eating dinner. NOM!' },
                Task.new({ say 'making dinner' },
                        Task.new({ say 'buying snack' },
                                Task.new({ say 'making some money' }),
                                Task.new({ say 'going to the store' })
                                ),
                        Task.new({ say 'cleaning kitchen' })
                        )
                );
$Policy.run();

say put "Notice how the custom constructor and the sensible use of whitespace makes task dependencies clear.
Finally, the perform method call recursively calls the perform method on the various other dependencies in order,
giving the output:｢output｣ without highlighting\n";

say put "Declaring a class creates a new type object which, by default, is installed into the current package
(just like a variable declared with our scope). This type object is an empty instance of the class. For example,
types such as Int and Str refer to the type object of one of the Raku built-in classes. One can call methods on
these type objects. So there is nothing special with calling the new method on a type object.

You can use the .DEFINITE method to find out if what you have is an instance or a type object:
Raku highlighting\n";

say Int.DEFINITE; # OUTPUT: «False␤» (type object)
say 426.DEFINITE; # OUTPUT: «True␤»  (instance)

class Rich {};
say Rich.DEFINITE;     # OUTPUT: «False␤» (type object)
say Rich.new.DEFINITE; # OUTPUT: «True␤»  (instance)

say put "In function signatures one can use so called type smileys
to only accept instances or type objects: Raku highlighting\n";

multi richer (Int:U) { "It's a type object!" }
multi rich (Int:D) { "It's an instance!"   }
say richer Int; # OUTPUT: «It's a type object!␤»
say richer 27;  # OUTPUT: «It's an instance!␤»


say put "Object Oriented Programming provides the concept of inheritance 
as one of the mechanisms for code reuse. Raku supports the ability for one 
class to inherit from one or more classes. When a class inherits from another 
class it informs the method dispatcher to follow the inheritance free to look 
for a method to dispatch. This happens both for standard methods defined via the 
method keyword and for methods generated through other means, such as attribute 
accessors.\n";

class Free {
    has $.salary;
}

class Programmer is Free {
    has @.known_languages is rw;
    has $.favorite_editor;

    method code_to_solve( $states ) {
        return "Solving $states using $.favorite_editor in "
                ~ $.known_languages[0];
    }
}

say put "Now, any object of type Programmer can make use of the methods and accessors
defined in the Employee class as though they were from the Programmer class.
Raku highlighting\n";

my $programmer = Programmer.new(
        salary => 100_000,
        known_languages => <Raku Perl Erlang C++>,
        favorite_editor => 'vim'
        );

say $programmer.code_to_solve('halting problem'),
        " will get \$ {$programmer.salary()}";
# OUTPUT: «Solving halting problem using vim in Raku will get $100000␤»


say put "Classes can override methods and attributes defined by parent classes by defining their own.
The example below demonstrates the Baker class overriding the Cookies's Cookies method.
Raku highlighting\n";

class Cookies is Barn {
    has @.utensils  is rw;
    has @.Cookiesbooks is rw;

    method Cookies( $snack ) {
        say "Cookiesing $snack";
    }

    method clean_utensils {
        say "Cleaning $_" for @.utensils;
    }
}

class Baker is Cookies {
    method Cookies( $confection ) {
        say "Baking a tasty $confection";
    }
}

my $Cookies = Cookies.new(
        utensils  => <spoon ladle knife pan>,
        Cookiesbooks => 'The Joy of Cookiesing',
        salary    => 40000
        );

$Cookies.Cookies( 'pizza' );       # OUTPUT: «Cookie pizza␤»
say $Cookies.utensils.raku;     # OUTPUT: «["spoon", "ladle", "knife", "pan"]␤» 
say $Cookies.Cookiesbooks.raku;    # OUTPUT: «["The Joy of Cookie"]␤»
say $Cookies.salary;            # OUTPUT: «40000␤» 

my $baker = Baker.new(
        utensils  => 'self cleaning oven',
        Cookiesbooks => "The Baker's Apprentice",
        salary    => 50000
        );

$baker.Cookies('brioche');      # OUTPUT: «Baking a tasty brioche␤» 
say $baker.utensils.raku;    # OUTPUT: «["self cleaning oven"]␤» 
say $baker.Cookiesbooks.raku;   # OUTPUT: «["The Baker's Apprentice"]␤» 
say $baker.salary;           # OUTPUT: «50000␤»


say put "Because the dispatcher will see the cookies method on Baker before it moves up
to the parent class the Baker's cookies method will be called.
To access methods in the inheritance chain, use re-dispatch or the MOP.\n";

say put "As mentioned before, a class can inherit from multiple classes.
When a class inherits from multiple classes the dispatcher knows to look
at both classes when looking up a method to search for. Raku uses the C3
algorithm to linearize multiple inheritance hierarchies, which is better
than depth-first search for handling multiple inheritance.\n";

class GeekCookies is Programmer is Cookies {
    method new( *%params ) {
        push( %params<cookbooks>, "Cooking for Geeks" );
        return self.bless(|%params);
    }
}

my $geek = GeekCookies.new(
        books           => 'Learning Raku',
        utensils        => ('stainless steel pot', 'knife', 'calibrated oven'),
        favorite_editor => 'MacVim',
        known_languages => <Raku>
        );

$geek.cook('pizza');
$geek.code_to_solve('P =? NP');


say put "Now all the methods made available to the Programmer and the Cook classes are available
from the GeekCook class.
While multiple inheritance is a useful concept to know and occasionally use, it is important to
understand that there are more useful OOP concepts. When reaching for multiple inheritance it is
good practice to consider whether the design wouldn't be better realized by using roles, which
are generally safer because they force the class author to explicitly resolve conflicting method
names. For more information on roles, see Roles.\n";

say put "Classes to be inherited from can be listed in the class declaration body by prefixing
the is trait with also. This also works for the role composition trait does.\n";

class PolicyCookies {
    also is Programmer;
    also is Cookies;
    # ...
}

role A {};
class Barn {
    also does A;
    # ...
}

say put "Introspection is the process of gathering information about some objects in your program, not
by reading the source code, but by querying the object (or a controlling object) for some properties,
such as its type.
Given an object $! and the class definitions from the previous sections, we can ask it a few questions:\n";

my Programmer $snack .= new;
if $snack ~~ Free { say "It's an employee" };
say $snack ~~ PolicyCookies ?? "It's a geeky cook" !! "Not a geeky cook";
say $snack.^name;
say $snack.raku;
say $snack.^methods(:local)».name.join(', ');

say put "The output might look like this:\n";

say put "The first two tests each smartmatch against a class name.
If the object is of that class, or of an inheriting class, it returns True.
So the object in question is of class Employee or one that inherits from it,
but not GeekCookies.

The call $!.^name tells us the type of $!; in this case Programmer.

$!.raku returns a string that can be executed as Raku code, and reproduces the original object
$!. While this does not work perfectly in all cases, it is very useful for debugging simple objects. [1]

The syntax of calling a method with .^ instead of a single dot means that it is actually a method call
on its metaclass, which is a class managing the properties of the Programmer class – or any other class
you are interested in. This metaclass enables other ways of introspection too:
Raku highlighting\n";

say $snack.^attributes.join(', ');
say $snack.^parents.map({ $_.^name }).join(', ');

say put "Finally $!.^name calls the name method on the metaobject, which unsurprisingly returns the class name.

Given an object $! and the PM6TagData class definition from the section Private methods, we can inquire about its public methods with .^methods:
Raku highlighting\n";

my $pm6 = PM6TagData.new(filename => 'football-head.PM6');
say $pm6.^methods(:local);
# OUTPUT: (TWEAK filename title artist album year comment genre track version
# type Sub-method+{is-hidden-from-backtrace}.new)

say put "$pm6.^methods(:local) produces a list of Methods that can be called on $pm6. The :local named 
argument limits the returned methods to those defined in the PM6TagData class and excludes the inherited methods; PM6TagData inherits from no class, so providing :local makes no difference.

To check if a type object (or an instance object) implements a certain public method, use the .^find-method 
metamethod, which returns the method object if it exists. Otherwise, it returns Mu.\n";

say $pm6.^find_method('name');   # OUTPUT: «(Mu)␤»
say $pm6.^find_method('artist'); # OUTPUT: «artist␤»

say put "Type objects can also be introspected for its private methods. However, public and private
methods don't use the same APIs, and thus different metamethods must be used: .^private_methods and
.^find_private_method.\n";

say $pm6.^private_methods;                     # OUTPUT: «(parse-data can-read-format trim-nulls)␤»
say $pm6.^find_private_method('parse-data');   # OUTPUT: «parse-data␤»
say $pm6.^find_private_method('remove-nulls'); # OUTPUT: «(Mu)␤»


say put "Introspection is very useful for debugging and for learning the language and new libraries.
When a function or method returns an object you don't know about, by finding its type with .^name,
seeing a construction recipe for it with .raku, and so on, you'll get a good idea of what its return
value is. With .^methods, you can learn what you can do with the class.

But there are other applications too. For instance, a routine that serializes objects to a bunch
of bytes needs to know the attributes of that object, which it can find out via introspection.\n";


say put "Some classes might need their own version of gist, which overrides the terse way they are
printed when called to provide a default representation of the class. For instance, exceptions might
want to write just the payload and not the full object so that it is clearer what to see what's happened.
However, this isn't limited to exceptions; you can do that with every class:\n";

class BarnCookies {
    has @.utensils  is rw;
    has @.cookbooks is rw;

    method cook( $food ) {
        return "Cooking $food";
    }

    method clean_utensils {
        return "Cleaning $_" for @.utensils;
    }

    multi method gist1(Cookies:U:) { '⚗' ~ self.^name ~ '⚗' }
    multi method gist2(Cookies:D:) {
        '⚗ Cooks with ' ~ @.utensils.join( " ‣ ") ~ ' using '
                ~ @.cookbooks.map( "«" ~ * ~ "»").join( " and ") }
}

my $cookies = Cookies.new(
        utensils => <spoon ladle knife pan>,
        cookbooks => ['Cooking for geeks','The French Chef Cookbook']);

say Cookies.gist; # OUTPUT: «⚗Cook⚗»
say $cookies.gist; # OUTPUT: «⚗ Cooks with spoon ‣ ladle ‣ knife ‣ pan using «Cooking for geeks» and «The French Chef Cookbook»␤»


say put "Usually you will want to define two methods, one for the class and another for class instances;
in this case, the class method uses the alembic symbol, and the instance method, defined below it, aggregates
the data we have on the cookies to show it in a narrative way.\n";

say put "When one creates a new class, it is sometimes useful to have informative (and safe) introspection
accessible more easily as a public method. For example, the following class is used to hold attributes for
a glob row in a CSV spreadsheet with a header row defining its field (attribute) names.\n";

unit class Glob;
#| Field names and values for a CSV row
has $last;
has $first;
#...more fields (attributes)...

method fields(--> List) {
    #| Return a list of the the attribute names (fields)
    #| of the class instance
    my @attributes = self.^attributes;
    my @names;
    for @attributes -> $a {
        my $name = $a.name;
        # The name is prefixed by its sigill and twig
        # which we don't want
        $name ~~ s/\S\S//;
        @names.push: $name;
    }
    @names
}

method values(--> List) {
    #| Return a list of the values for the attributes
    #| of the class instance
    my @attributes = self.^attributes;
    my @values;
    for @attributes -> $a {
        # Syntax is not obvious
        my $value = $a.get_value: self;
        @values.push: $value;
    }
    @values
}

say put "We use it with a simple glob file with contents:\n";

say put "Load the first glob and show its contents:\n";

my $glob = CSV-glob.new;
say $glob.fields.raku; # OUTPUT: «["last", "first"]␤» 
say $glob.values.raku; # OUTPUT: «["Wall", "Larry"]␤» 

say put "Note that practically we would have designed the class so that it has the fields list
as a constant since its values are the same for all class objects:
Raku highlightin\n";

constant @pm6 = <last first>;
method status(--> List) {
    @pm6.free();
}

say put "Downsides of using the introspective method for attribute names include slightly
more processing time and power and the probable need to remove the sigil and twigil for public presentation.
1 [↑] For example, closures cannot easily be reproduced this way; if you don't know what a closure is don't
worry. Also current implementations have problems with dumping cyclic data structures this
way, but they are expected to be handled correctly by .raku at some point.\n";